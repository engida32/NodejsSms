"use strict";

var crypto = require("crypto");

class HashGenerator {
  /**
   * Generate a Signature Hash.
   *
   * @param {String} method - the method to be used when creating the hash
   * @param {String} secret - the secret to be used when creating the hash
   * @param {Object} params - params to generate hash from
   *
   * @returns {String} the generated token
   */
  generate(method, secret, params) {
    params = params || {};
    var signedQuery = "";
    params = JSON.parse(JSON.stringify(params));

    if (params.sig) {
      delete params.sig;
    }

    Object.keys(params).sort().forEach(key => {
      // replace & and = with _
      signedQuery += "&" + key + "=" + params[key].replace(/\&|\=/g, "_");
    });
    var hash = "";

    switch (method) {
      case "md5hash":
        signedQuery += secret;
        hash = crypto.createHash("md5").update(signedQuery).digest("hex");
        break;

      case "md5":
      case "sha1":
      case "sha256":
      case "sha512":
        hash = crypto.createHmac(method, secret).update(signedQuery).digest("hex");
        break;

      default:
        throw "Unknown signature algorithm: ".concat(method, ". Expected: md5hash, md5, sha1, sha256, or sha512");
    }

    return hash;
  }

}

module.exports = HashGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IYXNoR2VuZXJhdG9yLmpzIl0sIm5hbWVzIjpbImNyeXB0byIsInJlcXVpcmUiLCJIYXNoR2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJtZXRob2QiLCJzZWNyZXQiLCJwYXJhbXMiLCJzaWduZWRRdWVyeSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInNpZyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZm9yRWFjaCIsImtleSIsInJlcGxhY2UiLCJoYXNoIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImNyZWF0ZUhtYWMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBRUEsTUFBTUMsYUFBTixDQUFvQjtBQUNsQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsUUFBUSxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUJDLE1BQWpCLEVBQXlCO0FBQy9CQSxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjtBQUNBLFFBQUlDLFdBQVcsR0FBRyxFQUFsQjtBQUVBRCxJQUFBQSxNQUFNLEdBQUdFLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLFNBQUwsQ0FBZUosTUFBZixDQUFYLENBQVQ7O0FBRUEsUUFBSUEsTUFBTSxDQUFDSyxHQUFYLEVBQWdCO0FBQ2QsYUFBT0wsTUFBTSxDQUFDSyxHQUFkO0FBQ0Q7O0FBRURDLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUCxNQUFaLEVBQ0dRLElBREgsR0FFR0MsT0FGSCxDQUVXQyxHQUFHLElBQUk7QUFDZDtBQUNBVCxNQUFBQSxXQUFXLElBQUksTUFBTVMsR0FBTixHQUFZLEdBQVosR0FBa0JWLE1BQU0sQ0FBQ1UsR0FBRCxDQUFOLENBQVlDLE9BQVosQ0FBb0IsUUFBcEIsRUFBOEIsR0FBOUIsQ0FBakM7QUFDRCxLQUxIO0FBT0EsUUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBRUEsWUFBUWQsTUFBUjtBQUNFLFdBQUssU0FBTDtBQUNFRyxRQUFBQSxXQUFXLElBQUlGLE1BQWY7QUFDQWEsUUFBQUEsSUFBSSxHQUFHbEIsTUFBTSxDQUNWbUIsVUFESSxDQUNPLEtBRFAsRUFFSkMsTUFGSSxDQUVHYixXQUZILEVBR0pjLE1BSEksQ0FHRyxLQUhILENBQVA7QUFJQTs7QUFDRixXQUFLLEtBQUw7QUFDQSxXQUFLLE1BQUw7QUFDQSxXQUFLLFFBQUw7QUFDQSxXQUFLLFFBQUw7QUFDRUgsUUFBQUEsSUFBSSxHQUFHbEIsTUFBTSxDQUNWc0IsVUFESSxDQUNPbEIsTUFEUCxFQUNlQyxNQURmLEVBRUplLE1BRkksQ0FFR2IsV0FGSCxFQUdKYyxNQUhJLENBR0csS0FISCxDQUFQO0FBSUE7O0FBRUY7QUFDRSxxREFBc0NqQixNQUF0QztBQW5CSjs7QUFzQkEsV0FBT2MsSUFBUDtBQUNEOztBQXBEaUI7O0FBdURwQkssTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsYUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuXG5jbGFzcyBIYXNoR2VuZXJhdG9yIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgU2lnbmF0dXJlIEhhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgLSB0aGUgbWV0aG9kIHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgaGFzaFxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VjcmV0IC0gdGhlIHNlY3JldCB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIGhhc2hcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHBhcmFtcyB0byBnZW5lcmF0ZSBoYXNoIGZyb21cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICAgKi9cbiAgZ2VuZXJhdGUobWV0aG9kLCBzZWNyZXQsIHBhcmFtcykge1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICB2YXIgc2lnbmVkUXVlcnkgPSBcIlwiO1xuXG4gICAgcGFyYW1zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcblxuICAgIGlmIChwYXJhbXMuc2lnKSB7XG4gICAgICBkZWxldGUgcGFyYW1zLnNpZztcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAuc29ydCgpXG4gICAgICAuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAvLyByZXBsYWNlICYgYW5kID0gd2l0aCBfXG4gICAgICAgIHNpZ25lZFF1ZXJ5ICs9IFwiJlwiICsga2V5ICsgXCI9XCIgKyBwYXJhbXNba2V5XS5yZXBsYWNlKC9cXCZ8XFw9L2csIFwiX1wiKTtcbiAgICAgIH0pO1xuXG4gICAgdmFyIGhhc2ggPSBcIlwiO1xuXG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgXCJtZDVoYXNoXCI6XG4gICAgICAgIHNpZ25lZFF1ZXJ5ICs9IHNlY3JldDtcbiAgICAgICAgaGFzaCA9IGNyeXB0b1xuICAgICAgICAgIC5jcmVhdGVIYXNoKFwibWQ1XCIpXG4gICAgICAgICAgLnVwZGF0ZShzaWduZWRRdWVyeSlcbiAgICAgICAgICAuZGlnZXN0KFwiaGV4XCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtZDVcIjpcbiAgICAgIGNhc2UgXCJzaGExXCI6XG4gICAgICBjYXNlIFwic2hhMjU2XCI6XG4gICAgICBjYXNlIFwic2hhNTEyXCI6XG4gICAgICAgIGhhc2ggPSBjcnlwdG9cbiAgICAgICAgICAuY3JlYXRlSG1hYyhtZXRob2QsIHNlY3JldClcbiAgICAgICAgICAudXBkYXRlKHNpZ25lZFF1ZXJ5KVxuICAgICAgICAgIC5kaWdlc3QoXCJoZXhcIik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBgVW5rbm93biBzaWduYXR1cmUgYWxnb3JpdGhtOiAke21ldGhvZH0uIEV4cGVjdGVkOiBtZDVoYXNoLCBtZDUsIHNoYTEsIHNoYTI1Niwgb3Igc2hhNTEyYDtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hHZW5lcmF0b3I7XG4iXX0=